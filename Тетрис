import pygame
import random

pygame.init()


bw, bh = 20, 20
board_w, board_h = 10, 20
board_x, board_y = 70, 70
screen_w, screen_h = board_x + board_w * bw + bw * 5, board_y + board_h * bh + bh * 5

colors = {
    0: (0, 0, 0),
    1: (255, 0, 0),
    2: (0, 255, 0),
    3: (0, 0, 255),
    4: (255, 255, 0),
    5: (255, 0, 255),
    6: (0, 255, 255),
    7: (200, 150, 50)
}

tetriminos = {
    0: [],  
    1: [(-1, 0), (0, 0), (1, 0), (2, 0)],  # I
    2: [(-1, 1), (-1, 0), (0, 0), (1, 0)],  # J
    3: [(1, 1), (-1, 0), (0, 0), (1, 0)],  # L
    4: [(-1, 0), (0, 0), (0, 1), (1, 1)],  # O
    5: [(0, -1), (0, 0), (-1, 0), (1, -1)],  # S
    6: [(-1, -1), (-1, 0), (0, 0), (1, 0)],  # T
    7: [(0, -1), (0, 0), (-1, 1), (1, 0)]  # Z
}

screen = pygame.display.set_mode((screen_w, screen_h))
pygame.display.set_caption("Тетрис")

clock = pygame.time.Clock()

board = [[0] * board_w for _ in range(board_h)]


def get_tetrimino():
    return {
        "id": random.randint(1, 7),
        "pos": (board_w // 2 - 2, 0),
        "rot": 0
    }


def draw_board():
    for i in range(board_h):
        for j in range(board_w):
            pygame.draw.rect(screen, colors[board[i][j]], (board_x + j * bw + bw, board_y + i * bh + bh, bw, bh))


def draw_tetrimino(tetrimino):
    for block in tetriminos[tetrimino["id"]]:
        x, y = block[0], block[1]
        # Rotate the block using a rotation matrix
        if tetrimino["rot"] == 1:
            x, y = -y, x
        elif tetrimino["rot"] == 2:
            x, y = -x, -y
        elif tetrimino["rot"] == 3:
            x, y = y, -x
        x, y = x + tetrimino["pos"][0], y + tetrimino["pos"][1]
        pygame.draw.rect(screen, colors[tetrimino["id"]], (board_x + x * bw + bw, board_y + y * bh + bh, bw, bh))


def check_collision(tetrimino):
    for block in tetriminos[tetrimino["id"]]:
        x, y = block[0] + tetrimino["pos"][0], block[1] + tetrimino["pos"][1]
        if x < 0 or x >= board_w or y >= board_h or (y >= 0 and board[y][x]):
            return True
    return False


def add_tetrimino(tetrimino):
    for block in tetriminos[tetrimino["id"]]:
        x, y = block[0] + tetrimino["pos"][0], block[1] + tetrimino["pos"][1]
        board[y][x] = tetrimino["id"]


def remove_full_rows():
    full_rows = [i for i in range(board_h) if all(board[i])]
    if full_rows:
        for i in full_rows:
            board.pop(i)
            board.insert(0, [0] * board_w)


def main():
    tetrimino = get_tetrimino()
    game_over = False
    start_circle_enabled = True
    paused = False
    prev_tetrimino = None

    while not game_over:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                    game_over = True
                elif event.key == pygame.K_SPACE:
                    new_rot = (tetrimino["rot"] + 1) % 4
                    temp = {"id": tetrimino["id"], "pos": tetrimino["pos"], "rot": new_rot}
                    if not check_collision(temp):
                        tetrimino["rot"] = new_rot
                if event.key == pygame.K_RIGHT:
                    temp = {"id": tetrimino["id"], "pos": (tetrimino["pos"][0] + 1, tetrimino["pos"][1]),
                            "rot": tetrimino["rot"]}
                    if not check_collision(temp):
                        tetrimino["pos"] = (tetrimino["pos"][0] + 1, tetrimino["pos"][1])
                elif event.key == pygame.K_LEFT:
                    temp = {"id": tetrimino["id"], "pos": (tetrimino["pos"][0] - 1, tetrimino["pos"][1]),
                            "rot": tetrimino["rot"]}
                    if not check_collision(temp):
                        tetrimino["pos"] = (tetrimino["pos"][0] - 1, tetrimino["pos"][1])
                elif event.key == pygame.K_LSHIFT or event.key == pygame.K_RSHIFT:
                    # Pause or resume the game
                    paused = not paused
                elif event.key == pygame.K_DOWN:
                    temp = {"id": tetrimino["id"], "pos": (tetrimino["pos"][0], tetrimino["pos"][1] + 1),
                            "rot": tetrimino["rot"]}
                    while not check_collision(temp):
                        tetrimino = temp
                        temp = {"id": tetrimino["id"], "pos": (tetrimino["pos"][0], tetrimino["pos"][1] + 1),
                                "rot": tetrimino["rot"]}
                    add_tetrimino(tetrimino)
                    remove_full_rows()
                    tetrimino = get_tetrimino()
                    if check_collision(tetrimino):
                        game_over = True

        if paused:
            continue

        temp = {"id": tetrimino["id"], "pos": (tetrimino["pos"][0], tetrimino["pos"][1] + 1), "rot": tetrimino["rot"]}

        if check_collision(temp):
            tetrimino = prev_tetrimino  # Update the position to the previous position
            add_tetrimino(tetrimino)
            remove_full_rows()
            tetrimino = get_tetrimino()
            if check_collision(tetrimino):
                game_over = True
        else:
            tetrimino = temp
            prev_tetrimino = tetrimino  

        screen.fill((255, 255, 255))
        draw_board()
        draw_tetrimino(tetrimino)
        pygame.display.flip()

        clock.tick(3)

    for i in range(1000):
        x = random.randint(board_x, board_x + board_w * bw)
        y = random.randint(board_y, board_y + board_h * bh)
        pygame.draw.circle(screen, colors[random.randint(1, 7)], (x, y), 2)
        pygame.display.flip()

    pygame.quit()


if __name__ == '__main__':
    main()
